// <auto-generated />
using LibraryManagementSystem.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagementSystem.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20250227080900_CascadeDeleted")]
    partial class CascadeDeleted
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagementSystem.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Firstname = "Altay",
                            Lastname = "Tarkan"
                        },
                        new
                        {
                            Id = 2,
                            Firstname = "Orhan",
                            Lastname = "Pamuk"
                        },
                        new
                        {
                            Id = 3,
                            Firstname = "Elif",
                            Lastname = "Şafak"
                        },
                        new
                        {
                            Id = 4,
                            Firstname = "Ahmet",
                            Lastname = "Ümit"
                        },
                        new
                        {
                            Id = 5,
                            Firstname = "İlber",
                            Lastname = "Ortaylı"
                        },
                        new
                        {
                            Id = 6,
                            Firstname = "Sabahattin",
                            Lastname = "Ali"
                        },
                        new
                        {
                            Id = 7,
                            Firstname = "Yaşar",
                            Lastname = "Kemal"
                        },
                        new
                        {
                            Id = 8,
                            Firstname = "Zülfü",
                            Lastname = "Livaneli"
                        },
                        new
                        {
                            Id = 9,
                            Firstname = "Halide Edib",
                            Lastname = "Adıvar"
                        },
                        new
                        {
                            Id = 10,
                            Firstname = "Reşat Nuri",
                            Lastname = "Güntekin"
                        },
                        new
                        {
                            Id = 11,
                            Firstname = "Hakan",
                            Lastname = "Günday"
                        },
                        new
                        {
                            Id = 12,
                            Firstname = "Ayşe",
                            Lastname = "Kulin"
                        },
                        new
                        {
                            Id = 13,
                            Firstname = "Cengiz",
                            Lastname = "Aytmatov"
                        },
                        new
                        {
                            Id = 14,
                            Firstname = "Dostoyevski",
                            Lastname = "Fyodor"
                        },
                        new
                        {
                            Id = 15,
                            Firstname = "Stefan",
                            Lastname = "Zweig"
                        });
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Category = "Roman",
                            Name = "Portakal Ağacı",
                            Price = 120
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Category = "Tarih",
                            Name = "Beyaz Kale",
                            Price = 150
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            Category = "Roman",
                            Name = "Aşk",
                            Price = 130
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            Category = "Polisiye",
                            Name = "İstanbul Hatırası",
                            Price = 140
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 5,
                            Category = "Tarih",
                            Name = "Kırk Ambar",
                            Price = 160
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 6,
                            Category = "Roman",
                            Name = "Kürk Mantolu Madonna",
                            Price = 110
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 7,
                            Category = "Macera",
                            Name = "İnce Memed",
                            Price = 170
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 8,
                            Category = "Dram",
                            Name = "Serenad",
                            Price = 125
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 9,
                            Category = "Tarih",
                            Name = "Ateşten Gömlek",
                            Price = 135
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 10,
                            Category = "Roman",
                            Name = "Çalıkuşu",
                            Price = 145
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 11,
                            Category = "Psikoloji",
                            Name = "Az",
                            Price = 155
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 12,
                            Category = "Biyografi",
                            Name = "Füreya",
                            Price = 165
                        },
                        new
                        {
                            Id = 13,
                            AuthorId = 13,
                            Category = "Roman",
                            Name = "Gün Olur Asra Bedel",
                            Price = 175
                        },
                        new
                        {
                            Id = 14,
                            AuthorId = 14,
                            Category = "Klasik",
                            Name = "Suç ve Ceza",
                            Price = 180
                        },
                        new
                        {
                            Id = 15,
                            AuthorId = 15,
                            Category = "Klasik",
                            Name = "Satranç",
                            Price = 190
                        });
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Firstname = "Ömer",
                            Lastname = "Tomakin"
                        },
                        new
                        {
                            Id = 2,
                            Firstname = "Ayşe",
                            Lastname = "Yılmaz"
                        },
                        new
                        {
                            Id = 3,
                            Firstname = "Mehmet",
                            Lastname = "Kaya"
                        },
                        new
                        {
                            Id = 4,
                            Firstname = "Elif",
                            Lastname = "Demir"
                        },
                        new
                        {
                            Id = 5,
                            Firstname = "Hasan",
                            Lastname = "Çelik"
                        },
                        new
                        {
                            Id = 6,
                            Firstname = "Zeynep",
                            Lastname = "Koç"
                        },
                        new
                        {
                            Id = 7,
                            Firstname = "Ali",
                            Lastname = "Şahin"
                        },
                        new
                        {
                            Id = 8,
                            Firstname = "Fatma",
                            Lastname = "Öztürk"
                        },
                        new
                        {
                            Id = 9,
                            Firstname = "Emre",
                            Lastname = "Arslan"
                        },
                        new
                        {
                            Id = 10,
                            Firstname = "Selin",
                            Lastname = "Yıldırım"
                        },
                        new
                        {
                            Id = 11,
                            Firstname = "Burak",
                            Lastname = "Eren"
                        },
                        new
                        {
                            Id = 12,
                            Firstname = "Gizem",
                            Lastname = "Aksoy"
                        },
                        new
                        {
                            Id = 13,
                            Firstname = "Yusuf",
                            Lastname = "Taş"
                        },
                        new
                        {
                            Id = 14,
                            Firstname = "Buse",
                            Lastname = "Kurt"
                        },
                        new
                        {
                            Id = 15,
                            Firstname = "Deniz",
                            Lastname = "Aslan"
                        });
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.UserDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("CategoryChoice")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Çekmeköy/İstanbul",
                            Age = 20,
                            CategoryChoice = "Roman",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "Kadıköy/İstanbul",
                            Age = 25,
                            CategoryChoice = "Bilim Kurgu",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Address = "Beşiktaş/İstanbul",
                            Age = 22,
                            CategoryChoice = "Polisiye",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Address = "Bornova/İzmir",
                            Age = 28,
                            CategoryChoice = "Tarih",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            Address = "Osmangazi/Bursa",
                            Age = 30,
                            CategoryChoice = "Macera",
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            Address = "Konak/İzmir",
                            Age = 27,
                            CategoryChoice = "Korku",
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            Address = "Keçiören/Ankara",
                            Age = 21,
                            CategoryChoice = "Biyografi",
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            Address = "Şahinbey/Gaziantep",
                            Age = 29,
                            CategoryChoice = "Felsefe",
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            Address = "Odunpazarı/Eskişehir",
                            Age = 24,
                            CategoryChoice = "Psikoloji",
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            Address = "Melikgazi/Kayseri",
                            Age = 32,
                            CategoryChoice = "Klasik",
                            UserId = 10
                        },
                        new
                        {
                            Id = 11,
                            Address = "Eyyübiye/Şanlıurfa",
                            Age = 23,
                            CategoryChoice = "Şiir",
                            UserId = 11
                        },
                        new
                        {
                            Id = 12,
                            Address = "Mamak/Ankara",
                            Age = 26,
                            CategoryChoice = "Edebiyat",
                            UserId = 12
                        },
                        new
                        {
                            Id = 13,
                            Address = "Büyükçekmece/İstanbul",
                            Age = 31,
                            CategoryChoice = "Tarih",
                            UserId = 13
                        },
                        new
                        {
                            Id = 14,
                            Address = "Seyhan/Adana",
                            Age = 22,
                            CategoryChoice = "Bilim",
                            UserId = 14
                        },
                        new
                        {
                            Id = 15,
                            Address = "Ortahisar/Trabzon",
                            Age = 28,
                            CategoryChoice = "Fantastik",
                            UserId = 15
                        });
                });

            modelBuilder.Entity("usersBooks", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("usersBooks");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            UserId = 1
                        },
                        new
                        {
                            BookId = 2,
                            UserId = 2
                        },
                        new
                        {
                            BookId = 3,
                            UserId = 3
                        },
                        new
                        {
                            BookId = 4,
                            UserId = 4
                        },
                        new
                        {
                            BookId = 5,
                            UserId = 5
                        },
                        new
                        {
                            BookId = 6,
                            UserId = 6
                        },
                        new
                        {
                            BookId = 7,
                            UserId = 7
                        },
                        new
                        {
                            BookId = 8,
                            UserId = 8
                        },
                        new
                        {
                            BookId = 9,
                            UserId = 9
                        },
                        new
                        {
                            BookId = 10,
                            UserId = 10
                        },
                        new
                        {
                            BookId = 11,
                            UserId = 11
                        },
                        new
                        {
                            BookId = 12,
                            UserId = 12
                        },
                        new
                        {
                            BookId = 13,
                            UserId = 13
                        },
                        new
                        {
                            BookId = 14,
                            UserId = 14
                        },
                        new
                        {
                            BookId = 15,
                            UserId = 15
                        });
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Book", b =>
                {
                    b.HasOne("LibraryManagementSystem.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.UserDetail", b =>
                {
                    b.HasOne("LibraryManagementSystem.Models.User", "User")
                        .WithOne("UserDetail")
                        .HasForeignKey("LibraryManagementSystem.Models.UserDetail", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("usersBooks", b =>
                {
                    b.HasOne("LibraryManagementSystem.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryManagementSystem.Models.User", b =>
                {
                    b.Navigation("UserDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
